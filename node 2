#include <TimedAction.h>
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <PubSubClient.h>
#include <stdlib.h>
#include <string.h>

//Definicoes
//#ifndef STASSID
//#define STASSID "Nina"
//#define STAPSK  "paralelogramo01"
//#endif

#ifndef STASSID
#define STASSID "INTELBRAS"
#define STAPSK  "Pbl-Sistemas-Digitais"
#endif


// Comandos de resposta

#define ANALOG_INPUT_VALUE "0x01"
#define DIGITAL_INPUT_VALUE "0x02"
#define LED_ON "0x03"
#define LED_OFF "0x04"
#define NODE_OK "0x200"

// Comandos de requisição
#define GET_ANALOG_INPUT_VALUE "0x04"
#define GET_DIGITAL_INPUT_VALUE "0x05"
#define SET_ON_NODEMCU_LED "0x06"
#define SET_OFF_NODEMCU_LED "0x07"
#define GET_NODE_CONNECTION_STATUS "0x08"
#define GET_LED_VALUE "0x09"

// Definições dos tópicos
#define ANALOG_SENSOR "tp04/g03/node/analog-sensor/value"
#define DIGITAL_SENSOR "tp04/g03/node/digital-sensor/value"
#define REQUEST "tp04/g03/mqtt/request/value"
#define RESPONSE "tp04/g03/mqtt/response/value"
#define ADDRESS "tp04/g03/node/digital-sensor/address"
#define NODE_CONNECTION_STATUS "tp04/g03/node/status"
#define ACTIVE_SENSOR "tp04/g03/node/active-sensors"
#define TIME_INTERVAL "tp04/g03/node/time-interval"

// Endereço pino
#define ADDR_D0 "D0"
#define ADDR_D1 "D1"
#define ADDR_D2 "D2"
#define ADDR_D3 "D3"
#define ADDR_D4 "D4"
#define ADDR_D5 "D5"
#define ADDR_D6 "D6"
#define ADDR_D7 "D7"

#define INIT_SEND_INTERVAl 1000

void setTimeInterval(int sec);
char getDigitalValue(String addr);
void sendDigitalValues();
void sendAnalogValue();
void getLedState();
void setLedState();

//Constantes e variaveis
const char* ssid = STASSID;
const char* password = STAPSK;

const char* mqtt_server = "10.0.0.101";
const char *mqtt_username = "aluno";
const char *mqtt_password = "@luno*123";

byte ledState = HIGH;
String address = "D0";
char activeSensors[] = {'1', '1', '0', '0', '0', '0', '0', '0'};
unsigned int sendInterval;

WiFiClient espClient;
PubSubClient MQTT(espClient);

void connectWifi_OTA() {
  Serial.begin(9600);
  delay(10);
  Serial.println("Booting");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }

  ArduinoOTA.setHostname("ESP-10.0.0.107");

  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH) {
      type = "sketch";
    } else { // U_FS
      type = "filesystem";
    }

    Serial.println("Start updating " + type);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) {
      Serial.println("Auth Failed");
    } else if (error == OTA_BEGIN_ERROR) {
      Serial.println("Begin Failed");
    } else if (error == OTA_CONNECT_ERROR) {
      Serial.println("Connect Failed");
    } else if (error == OTA_RECEIVE_ERROR) {
      Serial.println("Receive Failed");
    } else if (error == OTA_END_ERROR) {
      Serial.println("End Failed");
    }
  });
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect_MQTT() {
  Serial.print("Attempting MQTT connection...");
  String clientId = "N-TP04/G03";
  if (MQTT.connect(clientId.c_str(), mqtt_username, mqtt_password)) {
    Serial.println("connected");
    MQTT.subscribe(REQUEST);
    MQTT.subscribe(ACTIVE_SENSOR);
    MQTT.subscribe(TIME_INTERVAL);
  } else {
    Serial.print("failed, rc=");
    Serial.print(MQTT.state());
    Serial.println(" try again in 5 seconds");
    delay(2000);
  }
}

void setActiveSensors(char * str) {
  char *substr;
  substr = strtok(str, ",");
  // loop through the string to extract all other tokens
  while ( substr != NULL ) {
    char pinName[2];
    strncpy(pinName, substr, 2);
    int index = ((int)pinName[1]) - ((int)'0');

    char pinValue[2];
    strncpy(pinValue, substr + 3, 1);
    activeSensors[index] = *pinValue;

    substr = strtok(NULL, ",");
  }

}

void receivePackage(char* topic, byte* payload, unsigned int length) {
  String msg;

  //obtem a string do payload recebido
  for (int i = 0; i < length; i++) {
    char c = (char)payload[i];
    msg += c;
  }

  if (strcmp(topic, REQUEST) == 0) {

    if (msg == SET_ON_NODEMCU_LED) {
      setLedState(0);
      sendLedState();
    } else if (msg == SET_OFF_NODEMCU_LED) {
      setLedState(1);
      sendLedState();
    } else if (msg == GET_NODE_CONNECTION_STATUS) {
      MQTT.publish(RESPONSE, NODE_OK);
      sendLedState();
    } else if (msg == GET_DIGITAL_INPUT_VALUE) {
      sendDigitalValues();
    } else if (msg == GET_ANALOG_INPUT_VALUE) {
      sendAnalogValue();
    } else if (msg == GET_LED_VALUE) {
      sendLedState();
    }
  } else if (strcmp(topic, ACTIVE_SENSOR) == 0) {
    char arr[msg.length()];
    msg.toCharArray(arr, msg.length());
    setActiveSensors(arr);
  } else if (strcmp(topic, TIME_INTERVAL) == 0) {
    setTimeInterval(msg.toInt());
  }

  Serial.print("Mensagem recebida: ");
  Serial.println(msg);
  Serial.println();
}

char getDigitalValue(String addr) {
  int value;
  char valueCh;
  char buff[2];
  if (addr == "D0") {
    value = digitalRead(D0);
  } else if (addr == "D1") {
    value = digitalRead(D1);
  } else if (addr == "D2") {
    value = digitalRead(D2);
  } else if (addr == "D3") {
    value = digitalRead(D3);
  } else if (addr == "D4") {
    value = digitalRead(D4);
  } else if (addr == "D5") {
    value = digitalRead(D5);
  } else if (addr == "D6") {
    value = digitalRead(D6);
  } else if (addr == "D7") {
    value = digitalRead(D7);
  }

  if (value == 1) {
    valueCh = '1';
  } else if (value == 0) {
    valueCh = '0';
  }
  sprintf(buff, "%d", value);
  MQTT.publish(RESPONSE, buff);
  return valueCh;
}

void sendDigitalValues() {
  int value;
  char buf[9];
  char msg[50];

  for (int i = 0; i < sizeof(activeSensors); i++) {
    if (activeSensors[i] == '1') {
      String pinName = "D" + String(i);
      buf[i] = getDigitalValue(pinName);
    } else {
      buf[i] = 'n';
    }
  }
  sprintf(msg, "D0-%c,D1-%c,D2-%c,D3-%c,D4-%c,D5-%c,D6-%c,D7-%c", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7]);
  MQTT.publish(DIGITAL_SENSOR, msg);
}


void sendAnalogValue() {
  int value = analogRead(A0);
  char buf[5];
  sprintf(buf,"%d",value);
  MQTT.publish(ANALOG_SENSOR, buf);
}

void sendLedState() {
  if (ledState == 1) {
    MQTT.publish(RESPONSE, LED_ON);
  } else {
    MQTT.publish(RESPONSE, LED_OFF);
  }
}

void setLedState(byte state) {
  digitalWrite(LED_BUILTIN, state);
  if (state == 1) {
    ledState = 0;
  } else {
    ledState = 1;
  }
}

void sendAll() {
  sendDigitalValues();
  sendAnalogValue();
}

TimedAction sendAction = TimedAction(sendInterval, sendAll);

void setTimeInterval(int sec) {
  sendInterval = sec * 1000;
  sendAction.setInterval(sendInterval);
  MQTT.publish(RESPONSE, "0xFA");
}
void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
  setLedState(1);
  setTimeInterval(1);
  connectWifi_OTA();
  MQTT.setServer(mqtt_server, 1883);
  MQTT.setCallback(receivePackage);

}

void loop() {
  if (!MQTT.connected()) {
    reconnect_MQTT();
  }
  ArduinoOTA.handle();
  MQTT.loop();
  sendAction.check();
}

